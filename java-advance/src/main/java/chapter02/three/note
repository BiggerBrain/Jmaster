当程序创建一个子类对象时，系统不仅会为该类中定义的实例变量分配内存，也会为其父类中定义的所有实例变量分配内存，
即使子类定义了与父类中同名实例变量。也就是说，当系统创建一个Java对象时候，如果该Java类有两个父类
（一个直接父类A，一个间接父类B），假设A类中定义了2个实例变量，B类中定义了3个实例变量，
当前类中定义了2个实例变量，那这个Java对象将会保存2+3+2个实例变量。


如果在子类里定义了与父类中已有变量同名的变量，那么子类中定义的变量会隐藏父类中定义的变量。
注意不是完全覆盖，因此系统为创建子类对象时，依然会为父类中定义的、被隐藏的变量分配内存空间。


为了在子类方法中访问父类中定义的、被隐藏的实例变量，或者为了在子类方法中调用父类中定义的、被
覆盖（Override）的方法，可以通过super.作为限定来修饰这些实例变量和实例方法。