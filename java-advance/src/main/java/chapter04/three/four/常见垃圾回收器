1.串行回收器(Serial Collector)
    运行Java程序时使用-XX:+UseSerialGC附加选项启动
    对Young代和Old代的回收都是串行的（只使用一个CPU），而且垃圾回收执行期间会使得应用程序产生暂停。
    具体策略为，Young代采用串行复制的算法，Old代采用串行标记压缩算法。

2.并行回收器
    并行回收器通过运行Java程序时使用-XX:+UseParallelGC附加选项启用，它可以充分利用计算机的多个CPU来提高垃圾回收吞吐量。
    当计算机CPU很多时，可用-XX:ParallelGCThreads=size来减少并行线程的数目。

    并行回收器对于Old代采用与串行回收器完全相同的回收算法，都是采用单线程、标记整理的方式进行回收。


3.并行压缩回收器(Parallel Compacting Collector)
    与并行回收器最大的不同是对Old代的回收使用了不同的算法，并行压缩回收器最终会取代并行回收器。
    通过-XX:+UseParallelOldGC附加选项启用，一个可以通过-XX:ParallelGCThreads=size来设置并行线程的数目。

    并行压缩回收器对于Young代采用与并行回收器完全相同的回收算法。

    并行压缩回收器会将Old代划分成几个固定大小的区域。
    在mark阶段，多个垃圾回收线程会并行标记Old代中的可达对象。当某个对象被标记为可达对象时，还会更新该对象所在区域的大小以及该对象的位置信息。

    接下来是summary阶段。直接操作Old代的区域，而不是单个的对象。会扫描Old代的各区域密度，当发现某一个区域的能回收的空间达到某个数值的时候，
    垃圾回收器会判定该区域与该区域右边的所有区域都应该进行回收，而该区域左边的区域都会被标识为密集区域，垃圾回收器既不会把新对象移动到这些密集区域中，
    也不会对这些密集区域进行压缩。该区域和其右边的所有区域都会被进行压缩并回收空间。summary阶段目前还是串行操作。

    最后compact阶段。回收器利用summary阶段生成的数据识别出哪些区域是需要装填的，多个垃圾回收线程可以并行的将数据复制到这些区域中。
    在这之后，Old代的一端会密集的存在大量活动对象，另一端则存在大块的空闲块。


4.并发标识-清理（Mark-Sweep）回收器（CMS）
    通过-XX:+UseConcMarkSweepGC附件选项启用。

    对于Young代的回收方式和并行回收器的回收方式完全相同。
    Young代适当加大内存，不用频发地进行垃圾回收，而且增加垃圾回收的时间间隔后可以让更多的Young代对象自己死掉，从而避免复制。
    但是过大也有坏处，当垃圾回收器回收Young代内存时，复制成本显著上升，系统暂停时间显著加长。

    CMS不会进行内存压缩（不会移动可达对象占用的内存）

对于Permanent代内存，CMS可通过运行Java程序时使用-XX:+CMSClassUnloadingEnabled -XX:+CMSPermGenSweepingEnabled附件选项强制回收Permanent代内存


内存管理小技巧：
    1.尽量使用直接量
        如：String str="hello";而不是String str = new String("str");
    2.使用StringBuilder和StringBuffer进行字符串连接
    3.尽早释放无用对象的引用
    4.尽量少用静态变量
    5.避免在经常调用的方法、循环中创建Java对象
    6.缓存经常使用的对象
    7.尽量不要使用finalize方法
    8.考虑使用SoftReference